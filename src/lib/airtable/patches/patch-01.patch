diff --git a/src/lib/airtable/request.js b/src/lib/airtable/request.js
index 7b68055..25078e7 100644
--- a/src/lib/airtable/request.js
+++ b/src/lib/airtable/request.js
@@ -23,6 +23,7 @@ import {
   getRecordById,
   deleteRecord,
 } from './airtable';
+import { addToOfflineCustomer } from '../utils/offlineUtils';
 
 /*
  ******* CREATE RECORDS *******
@@ -73,20 +74,24 @@ export const createManyTariffPlans = async (records) => {
   return Promise.all(createPromises);
 };
 
-export const createCustomer = async (record) => {
-  return createRecord(Tables.Customers, record);
-};
-
-export const createManyCustomers = async (records) => {
-  const createPromises = [];
-  const numCalls = Math.ceil(records.length / 10);
-  for (let i = 0; i < numCalls; i += 1) {
-    const subset = records.slice(i * 10, (i + 1) * 10);
-    if (subset.length > 0)
-      createPromises.push(createRecords(Tables.Customers, subset));
+// NONGENERATED: We use a special, non-schema-generated createCustomer
+// that hits a special endpoint because we require additional logic to
+// handle offline functionality
+export const createCustomer = async (customer) => {
+  try {
+    const resp = await fetch(`${process.env.REACT_APP_AIRTABLE_ENDPOINT_URL}/customers/create`, {
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json'
+      },
+      body: JSON.stringify(customer)
+    })
+
+    console.log(resp);
+  } catch (err) {
+    console.log(err);
   }
-  return Promise.all(createPromises);
-};
+}
 
 export const createCustomerUpdate = async (record) => {
   return createRecord(Tables.CustomerUpdates, record);
@@ -103,37 +108,57 @@ export const createManyCustomerUpdates = async (records) => {
   return Promise.all(createPromises);
 };
 
-export const createMeterReadingsandInvoice = async (record) => {
-  return createRecord(Tables.MeterReadingsandInvoices, record);
-};
-
-export const createManyMeterReadingsandInvoices = async (records) => {
-  const createPromises = [];
-  const numCalls = Math.ceil(records.length / 10);
-  for (let i = 0; i < numCalls; i += 1) {
-    const subset = records.slice(i * 10, (i + 1) * 10);
-    if (subset.length > 0)
-      createPromises.push(createRecords(Tables.MeterReadingsandInvoices, subset));
+// NONGENERATED: Create a meter reading for a customer
+export const createMeterReadingandInvoice = async (meterReading, customer) => {
+  // If customer does not exist, we want to search the requests objectStore
+  // to add the current meter reading to the customer request being POST'ed
+  if (!customer.rid) {
+    addToOfflineCustomer(customer, 'meterReadings', meterReading)
+  } else {
+    // Customer has an rid so it is in the airtable.
+    // Make a standard request to create a meter reading / invoice.
+    try {
+      meterReading.customerId = customer.rid;
+      const resp = await fetch(`${process.env.REACT_APP_AIRTABLE_ENDPOINT_URL}/meter-readings-and-invoices/create`, {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json'
+        },
+        body: JSON.stringify(meterReading)
+      })
+      console.log('Response for meter reading: ', resp);
+    } catch (err) {
+      console.log('Error with create meter reading request: ', err);
+    }
   }
-  return Promise.all(createPromises);
-};
-
-export const createPayment = async (record) => {
-  return createRecord(Tables.Payments, record);
-};
-
-export const createManyPayments = async (records) => {
-  const createPromises = [];
-  const numCalls = Math.ceil(records.length / 10);
-  for (let i = 0; i < numCalls; i += 1) {
-    const subset = records.slice(i * 10, (i + 1) * 10);
-    if (subset.length > 0)
-      createPromises.push(createRecords(Tables.Payments, subset));
+}
+
+// NONGENERATED: Create a payment for a customer
+export const createPayment = async (payment, customer) => {
+  // If customer does not exist, we want to search the requests objectStore
+  // to add the current meter reading to the customer request being POST'ed
+  if (!customer.rid) {
+    addToOfflineCustomer(customer, 'payments', payment);
+  } else {
+    // Customer has an rid so it is in the airtable.
+    // Make a standard request to create a payment.
+    try {
+      payment.customerId = customer.rid;
+      const resp = await fetch(`${process.env.REACT_APP_AIRTABLE_ENDPOINT_URL}/payments/create`, {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json'
+        },
+        body: JSON.stringify(payment)
+      })
+      console.log('Response for payment: ', resp);
+    } catch (err) {
+      console.log('Error with create payment request: ', err)
+    }
   }
-  return Promise.all(createPromises);
-};
+}
 
-export const createFinancialSummarie = async (record) => {
+export const createFinancialSummary = async (record) => {
   return createRecord(Tables.FinancialSummaries, record);
 };
 
@@ -156,7 +181,7 @@ export const getUserById = async (id) => {
   return getRecordById(Tables.Users, id);
 };
 
-export const getUsersByIds = async ( ids, filterByFormula = '', sort = []
+export const getUsersByIds = async (ids, filterByFormula = '', sort = []
 ) => {
   let formula = `OR(${ids.reduce(
     (f, id) => `${f} {ID}='${id}',`,
@@ -174,7 +199,7 @@ export const getSiteById = async (id) => {
   return getRecordById(Tables.Sites, id);
 };
 
-export const getSitesByIds = async ( ids, filterByFormula = '', sort = []
+export const getSitesByIds = async (ids, filterByFormula = '', sort = []
 ) => {
   let formula = `OR(${ids.reduce(
     (f, id) => `${f} {ID}='${id}',`,
@@ -192,7 +217,7 @@ export const getTariffPlanById = async (id) => {
   return getRecordById(Tables.TariffPlans, id);
 };
 
-export const getTariffPlansByIds = async ( ids, filterByFormula = '', sort = []
+export const getTariffPlansByIds = async (ids, filterByFormula = '', sort = []
 ) => {
   let formula = `OR(${ids.reduce(
     (f, id) => `${f} {ID}='${id}',`,
@@ -210,7 +235,7 @@ export const getCustomerById = async (id) => {
   return getRecordById(Tables.Customers, id);
 };
 
-export const getCustomersByIds = async ( ids, filterByFormula = '', sort = []
+export const getCustomersByIds = async (ids, filterByFormula = '', sort = []
 ) => {
   let formula = `OR(${ids.reduce(
     (f, id) => `${f} {ID}='${id}',`,
@@ -228,7 +253,7 @@ export const getCustomerUpdateById = async (id) => {
   return getRecordById(Tables.CustomerUpdates, id);
 };
 
-export const getCustomerUpdatesByIds = async ( ids, filterByFormula = '', sort = []
+export const getCustomerUpdatesByIds = async (ids, filterByFormula = '', sort = []
 ) => {
   let formula = `OR(${ids.reduce(
     (f, id) => `${f} {ID}='${id}',`,
@@ -242,11 +267,11 @@ export const getAllCustomerUpdates = async (filterByFormula = '', sort = []) =>
   return getAllRecords(Tables.CustomerUpdates, filterByFormula, sort);
 };
 
-export const getMeterReadingsandInvoiceById = async (id) => {
+export const getMeterReadingandInvoiceById = async (id) => {
   return getRecordById(Tables.MeterReadingsandInvoices, id);
 };
 
-export const getMeterReadingsandInvoicesByIds = async ( ids, filterByFormula = '', sort = []
+export const getMeterReadingsandInvoicesByIds = async (ids, filterByFormula = '', sort = []
 ) => {
   let formula = `OR(${ids.reduce(
     (f, id) => `${f} {ID}='${id}',`,
@@ -264,7 +289,7 @@ export const getPaymentById = async (id) => {
   return getRecordById(Tables.Payments, id);
 };
 
-export const getPaymentsByIds = async ( ids, filterByFormula = '', sort = []
+export const getPaymentsByIds = async (ids, filterByFormula = '', sort = []
 ) => {
   let formula = `OR(${ids.reduce(
     (f, id) => `${f} {ID}='${id}',`,
@@ -278,11 +303,11 @@ export const getAllPayments = async (filterByFormula = '', sort = []) => {
   return getAllRecords(Tables.Payments, filterByFormula, sort);
 };
 
-export const getFinancialSummarieById = async (id) => {
+export const getFinancialSummaryById = async (id) => {
   return getRecordById(Tables.FinancialSummaries, id);
 };
 
-export const getFinancialSummariesByIds = async ( ids, filterByFormula = '', sort = []
+export const getFinancialSummariesByIds = async (ids, filterByFormula = '', sort = []
 ) => {
   let formula = `OR(${ids.reduce(
     (f, id) => `${f} {ID}='${id}',`,
@@ -375,7 +400,7 @@ export const updateManyCustomerUpdates = async (recordUpdates) => {
   return Promise.all(updatePromises);
 };
 
-export const updateMeterReadingsandInvoice = async (id, recordUpdates) => {
+export const updateMeterReadingandInvoice = async (id, recordUpdates) => {
   return updateRecord(Tables.MeterReadingsandInvoices, id, recordUpdates);
 };
 
@@ -405,7 +430,7 @@ export const updateManyPayments = async (recordUpdates) => {
   return Promise.all(updatePromises);
 };
 
-export const updateFinancialSummarie = async (id, recordUpdates) => {
+export const updateFinancialSummary = async (id, recordUpdates) => {
   return updateRecord(Tables.FinancialSummaries, id, recordUpdates);
 };
 
@@ -445,6 +470,6 @@ export const deleteMeterReadingsandInvoice = async (id) => {
 export const deletePayment = async (id) => {
   return deleteRecord(Tables.Payments, id);
 };
-export const deleteFinancialSummarie = async (id) => {
+export const deleteFinancialSummary = async (id) => {
   return deleteRecord(Tables.FinancialSummaries, id);
 };
diff --git a/src/lib/airtable/schema.js b/src/lib/airtable/schema.js
index cde4903..90e5c21 100644
--- a/src/lib/airtable/schema.js
+++ b/src/lib/airtable/schema.js
@@ -23,14 +23,14 @@ export const Columns = {
 		password: {name:`Password`, type:`text`},
 		name: {name:`Name`, type:`text`},
 		paymentIds: {name:`Payments`, type:`foreignKey-many`},
-		meterReadingsAndInvoiceIds: {name:`Meter Readings and Invoices`, type:`foreignKey-many`},
+		meterReadingAndInvoiceIds: {name:`Meter Readings and Invoices`, type:`foreignKey-many`},
 		customerUpdateIds: {name:`Customer Updates`, type:`foreignKey-many`},
 	},
 	"Sites": {
 		name: {name:`Name`, type:`text`},
 		userIds: {name:`Users`, type:`foreignKey-many`},
-		customerIds: {name:`Customers`, type:`foreignKey-many`},
-		financialSummarieIds: {name:`Financial Summaries`, type:`foreignKey-many`},
+		customers: {name:`Customers`, type:`custom-object`},
+		financialSummaryIds: {name:`Financial Summaries`, type:`foreignKey-many`},
 		tariffPlanIds: {name:`Tariff Plans`, type:`foreignKey-many`},
 	},
 	"Tariff Plans": {
